import unittest
from mock import Mock
from unittest.mock import patch
from src.Adapter.ElectionDistrictFirstRoundAdapter import ElectionDistrictFirstRoundAdapter
from src.Excel.ExcelManager import ExcelManager


class FirstRoundAdapterTest(unittest.TestCase): 
    
    # def test_excel_manager_called_in_extracts_datas_from_files(self) : 
    #     excel_manager_mock = Mock()
    #     panda_lib_mock = Mock()
    #     first_round_adapter = FirstRoundAdapter(panda_lib_mock, excel_manager_mock)
        
    #     first_round_adapter.extracts_datas_from_files()
        
    #     self.assertTrue(excel_manager_mock.import_first_round_results_datas.called)              
        
    
    def get_two_candidate_data(self, *args) : 
        candidate_first = "['01' 'Ain' 1 '1ère circonscription' 'Complet' 86187 43652 '50.65' 42535 '49.35' 490 '0.57' '1.15' 234 '0.27' '0.55' 41811 '48.51' '98.3' 2 'M' 'LAHY' 'Éric' 'DXG' 391 '0.45' '0.94' 'nan' 8 'M' 'GUÉRAUD' 'Sébastien' 'NUP' 9982 '11.58' '23.87' 'nan' 7 'F' 'ARMENJON' 'Eliane' 'ECO' 1161 '1.35' '2.78' 'nan' 1 'M' 'GUILLERMIN' 'Vincent' 'ENS' 8071 '9.36' '19.3' 'nan' '3.0' 'M' 'BRETON' 'Xavier' 'LR' '10599.0' '12.3' '25.35' 'nan' '5.0' 'M' 'MENDES' 'Michael' 'DSV' '641.0' '0.74' '1.53' 'nan' '6.0' 'M' 'BELLON' 'Julien' 'REC' '1995.0' '2.31' '4.77' 'nan' '4.0' 'F' 'PIROUX GIANNOTTI' 'Brigitte' 'RN' '8971.0' '10.41' '21.46' 'nan' 'nan']"
        candidate_second = "['25' 'Doubs' 2 '2ème circonscription' 'Complet' 79162 37688 '47.61' 41474 '52.39' 821 '1.04' '1.98' 326 '0.41' '0.79' 40327 '50.94' '97.23' 8 'F' 'VUITTON' 'Brigitte' 'DXG' 779 '0.98' '1.93' 'nan' 2 'M' 'RAVACLEY' 'Stéphane' 'NUP' 13112 '16.56' '32.51' 'nan' 6 'M' 'THOMASSIN' 'Geoffrey' 'DIV' 216 '0.27' '0.54' 'nan' 4 'F' 'MEYER' 'Claudine' 'REG' 0 '0.0' '0.0' 'nan' '3.0' 'M' 'ALAUZET' 'Eric' 'ENS' '12647.0' '15.98' '31.36' 'nan' '1.0' 'F' 'KAOULAL' 'Chafia' 'LR' '4354.0' '5.5' '10.8' 'nan' '7.0' 'M' 'PRENEL' 'Jim' 'DSV' '692.0' '0.87' '1.72' 'nan' '5.0' 'F' 'CARRAU' 'Barbara' 'REC' '1472.0' '1.86' '3.65' 'nan' '9.0' 'M' 'FUSIS' 'Eric' 'RN' '7055.0' '8.91' '17.49' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan']"
        candidates = [candidate_first, candidate_second]
        return candidates
    
    
    @patch.object(ExcelManager, 'import_first_round_results_datas', side_effect = get_two_candidate_data)
    def test_get_two_first_round_model_from_excel_manager(self, mock_excel_manager):
        pd = Mock()
        adapter = ElectionDistrictFirstRoundAdapter(pd, ExcelManager)
        
        elections_first_round_datas = adapter.extracts_datas_from_files()
        
        self.assertEqual(2, len(elections_first_round_datas))
        self.assertTrue(elections_first_round_datas[0].department != None)
        self.assertEqual(1, elections_first_round_datas[0].department.number)
        self.assertEqual('Ain', elections_first_round_datas[0].department.name)
        self.assertTrue(elections_first_round_datas[0].district != None)
        self.assertEqual(1, elections_first_round_datas[0].district.number)
        self.assertEqual('1ère circonscription', elections_first_round_datas[0].district.name)
        self.assertEqual('Complet', elections_first_round_datas[0].election.state_compute)
        self.assertEqual(86187, elections_first_round_datas[0].election.registered)
        self.assertEqual(43652, elections_first_round_datas[0].election.abstaining)
        self.assertEqual(50.65, elections_first_round_datas[0].election.rate_abstaining)
        self.assertEqual(42535, elections_first_round_datas[0].election.voting)
        self.assertEqual(49.35, elections_first_round_datas[0].election.rate_voting)  
        self.assertEqual(490, elections_first_round_datas[0].election.blank_balot)    
        self.assertEqual(0.57, elections_first_round_datas[0].election.rate_blank_registered)   
        self.assertEqual(1.15, elections_first_round_datas[0].election.rate_blank_voting)       
        self.assertEqual(234, elections_first_round_datas[0].election.null_ballot)  
        self.assertEqual(0.27, elections_first_round_datas[0].election.rate_null_registered)  
        self.assertEqual(0.55, elections_first_round_datas[0].election.rate_null_voting)  
        self.assertEqual(41811, elections_first_round_datas[0].election.expressed)  
        self.assertEqual(48.51, elections_first_round_datas[0].election.rate_express_registered)  
        self.assertEqual(98.3, elections_first_round_datas[0].election.rate_express_voting)  
        self.assertEqual(8, len(elections_first_round_datas[0].candidates))
        self.assertEqual('M', elections_first_round_datas[0].candidates[0].sexe)
        self.assertEqual('LAHY', elections_first_round_datas[0].candidates[0].last_name)
        self.assertEqual('Éric', elections_first_round_datas[0].candidates[0].first_name)
        self.assertEqual(391, elections_first_round_datas[0].candidates[0].vote)
        self.assertEqual(0.45, elections_first_round_datas[0].candidates[0].rate_vote_registered)
        self.assertEqual(0.94, elections_first_round_datas[0].candidates[0].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[1].sexe)
        self.assertEqual('GUÉRAUD', elections_first_round_datas[0].candidates[1].last_name)
        self.assertEqual('Sébastien', elections_first_round_datas[0].candidates[1].first_name)
        self.assertEqual(9982, elections_first_round_datas[0].candidates[1].vote)
        self.assertEqual(11.58, elections_first_round_datas[0].candidates[1].rate_vote_registered)
        self.assertEqual(23.87, elections_first_round_datas[0].candidates[1].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[0].candidates[2].sexe)
        self.assertEqual('ARMENJON', elections_first_round_datas[0].candidates[2].last_name)
        self.assertEqual('Eliane', elections_first_round_datas[0].candidates[2].first_name)
        self.assertEqual(1161, elections_first_round_datas[0].candidates[2].vote)
        self.assertEqual(1.35, elections_first_round_datas[0].candidates[2].rate_vote_registered)
        self.assertEqual(2.78, elections_first_round_datas[0].candidates[2].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[3].sexe)
        self.assertEqual('GUILLERMIN', elections_first_round_datas[0].candidates[3].last_name)
        self.assertEqual('Vincent', elections_first_round_datas[0].candidates[3].first_name)
        self.assertEqual(8071, elections_first_round_datas[0].candidates[3].vote)
        self.assertEqual(9.36, elections_first_round_datas[0].candidates[3].rate_vote_registered)
        self.assertEqual(19.3, elections_first_round_datas[0].candidates[3].rate_vote_expressed)        
        self.assertEqual('M', elections_first_round_datas[0].candidates[4].sexe)
        self.assertEqual('BRETON', elections_first_round_datas[0].candidates[4].last_name)
        self.assertEqual('Xavier', elections_first_round_datas[0].candidates[4].first_name)
        self.assertEqual(10599, elections_first_round_datas[0].candidates[4].vote)
        self.assertEqual(12.3, elections_first_round_datas[0].candidates[4].rate_vote_registered)
        self.assertEqual(25.35, elections_first_round_datas[0].candidates[4].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[5].sexe)
        self.assertEqual('MENDES', elections_first_round_datas[0].candidates[5].last_name)
        self.assertEqual('Michael', elections_first_round_datas[0].candidates[5].first_name)
        self.assertEqual(641, elections_first_round_datas[0].candidates[5].vote)
        self.assertEqual(0.74, elections_first_round_datas[0].candidates[5].rate_vote_registered)
        self.assertEqual(1.53, elections_first_round_datas[0].candidates[5].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[6].sexe)
        self.assertEqual('BELLON', elections_first_round_datas[0].candidates[6].last_name)
        self.assertEqual('Julien', elections_first_round_datas[0].candidates[6].first_name)
        self.assertEqual(1995, elections_first_round_datas[0].candidates[6].vote)
        self.assertEqual(2.31, elections_first_round_datas[0].candidates[6].rate_vote_registered)
        self.assertEqual(4.77, elections_first_round_datas[0].candidates[6].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[0].candidates[7].sexe)
        self.assertEqual('PIROUX GIANNOTTI', elections_first_round_datas[0].candidates[7].last_name)
        self.assertEqual('Brigitte', elections_first_round_datas[0].candidates[7].first_name)
        self.assertEqual(8971, elections_first_round_datas[0].candidates[7].vote)
        self.assertEqual(10.41, elections_first_round_datas[0].candidates[7].rate_vote_registered)
        self.assertEqual(21.46, elections_first_round_datas[0].candidates[7].rate_vote_expressed)
        
        self.assertEqual(25, elections_first_round_datas[1].department.number)
        self.assertEqual('Doubs', elections_first_round_datas[1].department.name)
        self.assertEqual(2, elections_first_round_datas[1].district.number)
        self.assertEqual('2ème circonscription', elections_first_round_datas[1].district.name)
        self.assertEqual('Complet', elections_first_round_datas[1].election.state_compute)
        self.assertEqual(79162, elections_first_round_datas[1].election.registered)
        self.assertEqual(37688, elections_first_round_datas[1].election.abstaining)
        self.assertEqual(47.61, elections_first_round_datas[1].election.rate_abstaining)
        self.assertEqual(41474, elections_first_round_datas[1].election.voting)
        self.assertEqual(52.39, elections_first_round_datas[1].election.rate_voting)  
        self.assertEqual(821, elections_first_round_datas[1].election.blank_balot)    
        self.assertEqual(1.04, elections_first_round_datas[1].election.rate_blank_registered)   
        self.assertEqual(1.98, elections_first_round_datas[1].election.rate_blank_voting)       
        self.assertEqual(326, elections_first_round_datas[1].election.null_ballot)  
        self.assertEqual(0.41, elections_first_round_datas[1].election.rate_null_registered)  
        self.assertEqual(0.79, elections_first_round_datas[1].election.rate_null_voting)  
        self.assertEqual(40327, elections_first_round_datas[1].election.expressed)  
        self.assertEqual(50.94, elections_first_round_datas[1].election.rate_express_registered)  
        self.assertEqual(97.23, elections_first_round_datas[1].election.rate_express_voting)  
        self.assertEqual(9, len(elections_first_round_datas[1].candidates))
        self.assertEqual('F', elections_first_round_datas[1].candidates[0].sexe)
        self.assertEqual('VUITTON', elections_first_round_datas[1].candidates[0].last_name)
        self.assertEqual('Brigitte', elections_first_round_datas[1].candidates[0].first_name)
        self.assertEqual(779, elections_first_round_datas[1].candidates[0].vote)
        self.assertEqual(0.98, elections_first_round_datas[1].candidates[0].rate_vote_registered)
        self.assertEqual(1.93, elections_first_round_datas[1].candidates[0].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[1].sexe)
        self.assertEqual('RAVACLEY', elections_first_round_datas[1].candidates[1].last_name)
        self.assertEqual('Stéphane', elections_first_round_datas[1].candidates[1].first_name)
        self.assertEqual(13112, elections_first_round_datas[1].candidates[1].vote)
        self.assertEqual(16.56, elections_first_round_datas[1].candidates[1].rate_vote_registered)
        self.assertEqual(32.51, elections_first_round_datas[1].candidates[1].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[2].sexe)
        self.assertEqual('THOMASSIN', elections_first_round_datas[1].candidates[2].last_name)
        self.assertEqual('Geoffrey', elections_first_round_datas[1].candidates[2].first_name)
        self.assertEqual(216, elections_first_round_datas[1].candidates[2].vote)
        self.assertEqual(0.27, elections_first_round_datas[1].candidates[2].rate_vote_registered)
        self.assertEqual(0.54, elections_first_round_datas[1].candidates[2].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[1].candidates[3].sexe)
        self.assertEqual('MEYER', elections_first_round_datas[1].candidates[3].last_name)
        self.assertEqual('Claudine', elections_first_round_datas[1].candidates[3].first_name)
        self.assertEqual(0, elections_first_round_datas[1].candidates[3].vote)
        self.assertEqual(0.0, elections_first_round_datas[1].candidates[3].rate_vote_registered)
        self.assertEqual(0.0, elections_first_round_datas[1].candidates[3].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[4].sexe)
        self.assertEqual('ALAUZET', elections_first_round_datas[1].candidates[4].last_name)
        self.assertEqual('Eric', elections_first_round_datas[1].candidates[4].first_name)
        self.assertEqual(12647, elections_first_round_datas[1].candidates[4].vote)
        self.assertEqual(15.98, elections_first_round_datas[1].candidates[4].rate_vote_registered)
        self.assertEqual(31.36, elections_first_round_datas[1].candidates[4].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[1].candidates[5].sexe)
        self.assertEqual('KAOULAL', elections_first_round_datas[1].candidates[5].last_name)
        self.assertEqual('Chafia', elections_first_round_datas[1].candidates[5].first_name)
        self.assertEqual(4354, elections_first_round_datas[1].candidates[5].vote)
        self.assertEqual(5.5, elections_first_round_datas[1].candidates[5].rate_vote_registered)
        self.assertEqual(10.8, elections_first_round_datas[1].candidates[5].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[6].sexe)
        self.assertEqual('PRENEL', elections_first_round_datas[1].candidates[6].last_name)
        self.assertEqual('Jim', elections_first_round_datas[1].candidates[6].first_name)
        self.assertEqual(692, elections_first_round_datas[1].candidates[6].vote)
        self.assertEqual(0.87, elections_first_round_datas[1].candidates[6].rate_vote_registered)
        self.assertEqual(1.72, elections_first_round_datas[1].candidates[6].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[1].candidates[7].sexe)
        self.assertEqual('CARRAU', elections_first_round_datas[1].candidates[7].last_name)
        self.assertEqual('Barbara', elections_first_round_datas[1].candidates[7].first_name)
        self.assertEqual(1472, elections_first_round_datas[1].candidates[7].vote)
        self.assertEqual(1.86, elections_first_round_datas[1].candidates[7].rate_vote_registered)
        self.assertEqual(3.65, elections_first_round_datas[1].candidates[7].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[8].sexe)
        self.assertEqual('FUSIS', elections_first_round_datas[1].candidates[8].last_name)
        self.assertEqual('Eric', elections_first_round_datas[1].candidates[8].first_name)
        self.assertEqual(7055, elections_first_round_datas[1].candidates[8].vote)
        self.assertEqual(8.91, elections_first_round_datas[1].candidates[8].rate_vote_registered)
        self.assertEqual(17.49, elections_first_round_datas[1].candidates[8].rate_vote_expressed)