import unittest
from mock import Mock
from unittest.mock import patch
from src.Adapter.ElectionDistrictFirstRoundAdapter import ElectionDistrictFirstRoundAdapter
from src.Excel.ExcelManager import ExcelManager

#TODO FACTORISER les asserts
class ElectionDistrictFirstRoundAdapterTest(unittest.TestCase): 
    
    #TODO repare this UT
    # def none_candidates(self, *args) : 
    #     candidates = []
    #     return candidates
    
    # @patch.object(ExcelManager, 'import_first_round_results_datas', side_effect = none_candidates)
    # def test_excel_manager_called_in_extracts_datas_from_files(self) : 
    #     pd = Mock()
    #     adapter = ElectionDistrictFirstRoundAdapter(pd, ExcelManager)
    #     elections_first_round_datas = ElectionDistrictFirstRoundAdapter(pd, ExcelManager)
        
    #     elections_first_round_datas.extracts_datas_from_files()
        
    #     self.assertTrue(ExcelManager.import_first_round_results_datas.called)              
        
    
    def get_two_candidate_data(self, *args) : 
        candidate_first = "['01' 'Ain' 1 '1ère circonscription' 'Complet' 86187 43652 '50.65' 42535 '49.35' 490 '0.57' '1.15' 234 '0.27' '0.55' 41811 '48.51' '98.3' 2 'M' 'LAHY' 'Éric' 'DXG' 391 '0.45' '0.94' 'nan' 8 'M' 'GUÉRAUD' 'Sébastien' 'NUP' 9982 '11.58' '23.87' 'nan' 7 'F' 'ARMENJON' 'Eliane' 'ECO' 1161 '1.35' '2.78' 'nan' 1 'M' 'GUILLERMIN' 'Vincent' 'ENS' 8071 '9.36' '19.3' 'nan' '3.0' 'M' 'BRETON' 'Xavier' 'LR' '10599.0' '12.3' '25.35' 'nan' '5.0' 'M' 'MENDES' 'Michael' 'DSV' '641.0' '0.74' '1.53' 'nan' '6.0' 'M' 'BELLON' 'Julien' 'REC' '1995.0' '2.31' '4.77' 'nan' '4.0' 'F' 'PIROUX GIANNOTTI' 'Brigitte' 'RN' '8971.0' '10.41' '21.46' 'nan' 'nan']"
        candidate_second = "['25' 'Doubs' 2 '2ème circonscription' 'Complet' 79162 37688 '47.61' 41474 '52.39' 821 '1.04' '1.98' 326 '0.41' '0.79' 40327 '50.94' '97.23' 8 'F' 'VUITTON' 'Brigitte' 'DXG' 779 '0.98' '1.93' 'nan' 2 'M' 'RAVACLEY' 'Stéphane' 'NUP' 13112 '16.56' '32.51' 'nan' 6 'M' 'THOMASSIN' 'Geoffrey' 'DIV' 216 '0.27' '0.54' 'nan' 4 'F' 'MEYER' 'Claudine' 'REG' 0 '0.0' '0.0' 'nan' '3.0' 'M' 'ALAUZET' 'Eric' 'ENS' '12647.0' '15.98' '31.36' 'nan' '1.0' 'F' 'KAOULAL' 'Chafia' 'LR' '4354.0' '5.5' '10.8' 'nan' '7.0' 'M' 'PRENEL' 'Jim' 'DSV' '692.0' '0.87' '1.72' 'nan' '5.0' 'F' 'CARRAU' 'Barbara' 'REC' '1472.0' '1.86' '3.65' 'nan' '9.0' 'M' 'FUSIS' 'Eric' 'RN' '7055.0' '8.91' '17.49' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan']"
        candidates = [candidate_first, candidate_second]
        return candidates
    
    
    @patch.object(ExcelManager, 'import_first_round_results_datas', side_effect = get_two_candidate_data)
    def test_get_two_first_round_model_from_excel_manager(self, mock_excel_manager):
        pd = Mock()
        adapter = ElectionDistrictFirstRoundAdapter(pd, ExcelManager)
        
        elections_first_round_datas = adapter.extracts_datas_from_files()
        
        self.assertEqual(2, len(elections_first_round_datas))
        self.assertTrue(elections_first_round_datas[0].department != None)
        self.assertEqual(1, elections_first_round_datas[0].department.number)
        self.assertEqual('Ain', elections_first_round_datas[0].department.name)
        self.assertTrue(elections_first_round_datas[0].district != None)
        self.assertEqual(1, elections_first_round_datas[0].district.number)
        self.assertEqual('1ère circonscription', elections_first_round_datas[0].district.name)
        self.assertEqual('Complet', elections_first_round_datas[0].election.state_compute)
        self.assertEqual(86187, elections_first_round_datas[0].election.registered)
        self.assertEqual(43652, elections_first_round_datas[0].election.abstaining)
        self.assertEqual(50.65, elections_first_round_datas[0].election.rate_abstaining)
        self.assertEqual(42535, elections_first_round_datas[0].election.voting)
        self.assertEqual(49.35, elections_first_round_datas[0].election.rate_voting)  
        self.assertEqual(490, elections_first_round_datas[0].election.blank_balot)    
        self.assertEqual(0.57, elections_first_round_datas[0].election.rate_blank_registered)   
        self.assertEqual(1.15, elections_first_round_datas[0].election.rate_blank_voting)       
        self.assertEqual(234, elections_first_round_datas[0].election.null_ballot)  
        self.assertEqual(0.27, elections_first_round_datas[0].election.rate_null_registered)  
        self.assertEqual(0.55, elections_first_round_datas[0].election.rate_null_voting)  
        self.assertEqual(41811, elections_first_round_datas[0].election.expressed)  
        self.assertEqual(48.51, elections_first_round_datas[0].election.rate_express_registered)  
        self.assertEqual(98.3, elections_first_round_datas[0].election.rate_express_voting)  
        self.assertEqual(8, len(elections_first_round_datas[0].candidates))
        self.assertEqual('M', elections_first_round_datas[0].candidates[0].sexe)
        self.assertEqual('LAHY', elections_first_round_datas[0].candidates[0].last_name)
        self.assertEqual('Éric', elections_first_round_datas[0].candidates[0].first_name)
        self.assertEqual(391, elections_first_round_datas[0].candidates[0].vote)
        self.assertEqual(0.45, elections_first_round_datas[0].candidates[0].rate_vote_registered)
        self.assertEqual(0.94, elections_first_round_datas[0].candidates[0].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[1].sexe)
        self.assertEqual('GUÉRAUD', elections_first_round_datas[0].candidates[1].last_name)
        self.assertEqual('Sébastien', elections_first_round_datas[0].candidates[1].first_name)
        self.assertEqual(9982, elections_first_round_datas[0].candidates[1].vote)
        self.assertEqual(11.58, elections_first_round_datas[0].candidates[1].rate_vote_registered)
        self.assertEqual(23.87, elections_first_round_datas[0].candidates[1].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[0].candidates[2].sexe)
        self.assertEqual('ARMENJON', elections_first_round_datas[0].candidates[2].last_name)
        self.assertEqual('Eliane', elections_first_round_datas[0].candidates[2].first_name)
        self.assertEqual(1161, elections_first_round_datas[0].candidates[2].vote)
        self.assertEqual(1.35, elections_first_round_datas[0].candidates[2].rate_vote_registered)
        self.assertEqual(2.78, elections_first_round_datas[0].candidates[2].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[3].sexe)
        self.assertEqual('GUILLERMIN', elections_first_round_datas[0].candidates[3].last_name)
        self.assertEqual('Vincent', elections_first_round_datas[0].candidates[3].first_name)
        self.assertEqual(8071, elections_first_round_datas[0].candidates[3].vote)
        self.assertEqual(9.36, elections_first_round_datas[0].candidates[3].rate_vote_registered)
        self.assertEqual(19.3, elections_first_round_datas[0].candidates[3].rate_vote_expressed)        
        self.assertEqual('M', elections_first_round_datas[0].candidates[4].sexe)
        self.assertEqual('BRETON', elections_first_round_datas[0].candidates[4].last_name)
        self.assertEqual('Xavier', elections_first_round_datas[0].candidates[4].first_name)
        self.assertEqual(10599, elections_first_round_datas[0].candidates[4].vote)
        self.assertEqual(12.3, elections_first_round_datas[0].candidates[4].rate_vote_registered)
        self.assertEqual(25.35, elections_first_round_datas[0].candidates[4].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[5].sexe)
        self.assertEqual('MENDES', elections_first_round_datas[0].candidates[5].last_name)
        self.assertEqual('Michael', elections_first_round_datas[0].candidates[5].first_name)
        self.assertEqual(641, elections_first_round_datas[0].candidates[5].vote)
        self.assertEqual(0.74, elections_first_round_datas[0].candidates[5].rate_vote_registered)
        self.assertEqual(1.53, elections_first_round_datas[0].candidates[5].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[6].sexe)
        self.assertEqual('BELLON', elections_first_round_datas[0].candidates[6].last_name)
        self.assertEqual('Julien', elections_first_round_datas[0].candidates[6].first_name)
        self.assertEqual(1995, elections_first_round_datas[0].candidates[6].vote)
        self.assertEqual(2.31, elections_first_round_datas[0].candidates[6].rate_vote_registered)
        self.assertEqual(4.77, elections_first_round_datas[0].candidates[6].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[0].candidates[7].sexe)
        self.assertEqual('PIROUX GIANNOTTI', elections_first_round_datas[0].candidates[7].last_name)
        self.assertEqual('Brigitte', elections_first_round_datas[0].candidates[7].first_name)
        self.assertEqual(8971, elections_first_round_datas[0].candidates[7].vote)
        self.assertEqual(10.41, elections_first_round_datas[0].candidates[7].rate_vote_registered)
        self.assertEqual(21.46, elections_first_round_datas[0].candidates[7].rate_vote_expressed)
        
        self.assertEqual(25, elections_first_round_datas[1].department.number)
        self.assertEqual('Doubs', elections_first_round_datas[1].department.name)
        self.assertEqual(2, elections_first_round_datas[1].district.number)
        self.assertEqual('2ème circonscription', elections_first_round_datas[1].district.name)
        self.assertEqual('Complet', elections_first_round_datas[1].election.state_compute)
        self.assertEqual(79162, elections_first_round_datas[1].election.registered)
        self.assertEqual(37688, elections_first_round_datas[1].election.abstaining)
        self.assertEqual(47.61, elections_first_round_datas[1].election.rate_abstaining)
        self.assertEqual(41474, elections_first_round_datas[1].election.voting)
        self.assertEqual(52.39, elections_first_round_datas[1].election.rate_voting)  
        self.assertEqual(821, elections_first_round_datas[1].election.blank_balot)    
        self.assertEqual(1.04, elections_first_round_datas[1].election.rate_blank_registered)   
        self.assertEqual(1.98, elections_first_round_datas[1].election.rate_blank_voting)       
        self.assertEqual(326, elections_first_round_datas[1].election.null_ballot)  
        self.assertEqual(0.41, elections_first_round_datas[1].election.rate_null_registered)  
        self.assertEqual(0.79, elections_first_round_datas[1].election.rate_null_voting)  
        self.assertEqual(40327, elections_first_round_datas[1].election.expressed)  
        self.assertEqual(50.94, elections_first_round_datas[1].election.rate_express_registered)  
        self.assertEqual(97.23, elections_first_round_datas[1].election.rate_express_voting)  
        self.assertEqual(9, len(elections_first_round_datas[1].candidates))
        self.assertEqual('F', elections_first_round_datas[1].candidates[0].sexe)
        self.assertEqual('VUITTON', elections_first_round_datas[1].candidates[0].last_name)
        self.assertEqual('Brigitte', elections_first_round_datas[1].candidates[0].first_name)
        self.assertEqual(779, elections_first_round_datas[1].candidates[0].vote)
        self.assertEqual(0.98, elections_first_round_datas[1].candidates[0].rate_vote_registered)
        self.assertEqual(1.93, elections_first_round_datas[1].candidates[0].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[1].sexe)
        self.assertEqual('RAVACLEY', elections_first_round_datas[1].candidates[1].last_name)
        self.assertEqual('Stéphane', elections_first_round_datas[1].candidates[1].first_name)
        self.assertEqual(13112, elections_first_round_datas[1].candidates[1].vote)
        self.assertEqual(16.56, elections_first_round_datas[1].candidates[1].rate_vote_registered)
        self.assertEqual(32.51, elections_first_round_datas[1].candidates[1].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[2].sexe)
        self.assertEqual('THOMASSIN', elections_first_round_datas[1].candidates[2].last_name)
        self.assertEqual('Geoffrey', elections_first_round_datas[1].candidates[2].first_name)
        self.assertEqual(216, elections_first_round_datas[1].candidates[2].vote)
        self.assertEqual(0.27, elections_first_round_datas[1].candidates[2].rate_vote_registered)
        self.assertEqual(0.54, elections_first_round_datas[1].candidates[2].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[1].candidates[3].sexe)
        self.assertEqual('MEYER', elections_first_round_datas[1].candidates[3].last_name)
        self.assertEqual('Claudine', elections_first_round_datas[1].candidates[3].first_name)
        self.assertEqual(0, elections_first_round_datas[1].candidates[3].vote)
        self.assertEqual(0.0, elections_first_round_datas[1].candidates[3].rate_vote_registered)
        self.assertEqual(0.0, elections_first_round_datas[1].candidates[3].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[4].sexe)
        self.assertEqual('ALAUZET', elections_first_round_datas[1].candidates[4].last_name)
        self.assertEqual('Eric', elections_first_round_datas[1].candidates[4].first_name)
        self.assertEqual(12647, elections_first_round_datas[1].candidates[4].vote)
        self.assertEqual(15.98, elections_first_round_datas[1].candidates[4].rate_vote_registered)
        self.assertEqual(31.36, elections_first_round_datas[1].candidates[4].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[1].candidates[5].sexe)
        self.assertEqual('KAOULAL', elections_first_round_datas[1].candidates[5].last_name)
        self.assertEqual('Chafia', elections_first_round_datas[1].candidates[5].first_name)
        self.assertEqual(4354, elections_first_round_datas[1].candidates[5].vote)
        self.assertEqual(5.5, elections_first_round_datas[1].candidates[5].rate_vote_registered)
        self.assertEqual(10.8, elections_first_round_datas[1].candidates[5].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[6].sexe)
        self.assertEqual('PRENEL', elections_first_round_datas[1].candidates[6].last_name)
        self.assertEqual('Jim', elections_first_round_datas[1].candidates[6].first_name)
        self.assertEqual(692, elections_first_round_datas[1].candidates[6].vote)
        self.assertEqual(0.87, elections_first_round_datas[1].candidates[6].rate_vote_registered)
        self.assertEqual(1.72, elections_first_round_datas[1].candidates[6].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[1].candidates[7].sexe)
        self.assertEqual('CARRAU', elections_first_round_datas[1].candidates[7].last_name)
        self.assertEqual('Barbara', elections_first_round_datas[1].candidates[7].first_name)
        self.assertEqual(1472, elections_first_round_datas[1].candidates[7].vote)
        self.assertEqual(1.86, elections_first_round_datas[1].candidates[7].rate_vote_registered)
        self.assertEqual(3.65, elections_first_round_datas[1].candidates[7].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[8].sexe)
        self.assertEqual('FUSIS', elections_first_round_datas[1].candidates[8].last_name)
        self.assertEqual('Eric', elections_first_round_datas[1].candidates[8].first_name)
        self.assertEqual(7055, elections_first_round_datas[1].candidates[8].vote)
        self.assertEqual(8.91, elections_first_round_datas[1].candidates[8].rate_vote_registered)
        self.assertEqual(17.49, elections_first_round_datas[1].candidates[8].rate_vote_expressed)
        
    def get_four_candidate_data(self, *args) : 
        candidate_first = "['01' 'Ain' 1 '1ère circonscription' 'Complet' 86187 43652 '50.65' 42535 '49.35' 490 '0.57' '1.15' 234 '0.27' '0.55' 41811 '48.51' '98.3' 2 'M' 'LAHY' 'Éric' 'DXG' 391 '0.45' '0.94' 'nan' 8 'M' 'GUÉRAUD' 'Sébastien' 'NUP' 9982 '11.58' '23.87' 'nan' 7 'F' 'ARMENJON' 'Eliane' 'ECO' 1161 '1.35' '2.78' 'nan' 1 'M' 'GUILLERMIN' 'Vincent' 'ENS' 8071 '9.36' '19.3' 'nan' '3.0' 'M' 'BRETON' 'Xavier' 'LR' '10599.0' '12.3' '25.35' 'nan' '5.0' 'M' 'MENDES' 'Michael' 'DSV' '641.0' '0.74' '1.53' 'nan' '6.0' 'M' 'BELLON' 'Julien' 'REC' '1995.0' '2.31' '4.77' 'nan' '4.0' 'F' 'PIROUX GIANNOTTI' 'Brigitte' 'RN' '8971.0' '10.41' '21.46' 'nan' 'nan']"
        candidate_second = "['25' 'Doubs' 2 '2ème circonscription' 'Complet' 79162 37688 '47.61' 41474 '52.39' 821 '1.04' '1.98' 326 '0.41' '0.79' 40327 '50.94' '97.23' 8 'F' 'VUITTON' 'Brigitte' 'DXG' 779 '0.98' '1.93' 'nan' 2 'M' 'RAVACLEY' 'Stéphane' 'NUP' 13112 '16.56' '32.51' 'nan' 6 'M' 'THOMASSIN' 'Geoffrey' 'DIV' 216 '0.27' '0.54' 'nan' 4 'F' 'MEYER' 'Claudine' 'REG' 0 '0.0' '0.0' 'nan' '3.0' 'M' 'ALAUZET' 'Eric' 'ENS' '12647.0' '15.98' '31.36' 'nan' '1.0' 'F' 'KAOULAL' 'Chafia' 'LR' '4354.0' '5.5' '10.8' 'nan' '7.0' 'M' 'PRENEL' 'Jim' 'DSV' '692.0' '0.87' '1.72' 'nan' '5.0' 'F' 'CARRAU' 'Barbara' 'REC' '1472.0' '1.86' '3.65' 'nan' '9.0' 'M' 'FUSIS' 'Eric' 'RN' '7055.0' '8.91' '17.49' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan']"
        candidate_third = "['28' 'Eure-et-Loir' 3 '3ème circonscription' 'Complet' 71342 37670 '52.8' 33672 '47.2' 523 '0.73' '1.55' 222 '0.31' '0.66' 32927 '46.15' '97.79' 8 'M' 'CHEVROLLIER' 'Vincent' 'DXG' 325 '0.46' '0.99' 'nan' 13 'F' 'LAMOUREUX' 'Aurore' 'DXG' 274 '0.38' '0.83' 'nan' 2 'F' 'ORFILA' 'Valéria' 'NUP' 6283 '8.81' '19.08' 'nan' 9 'F' 'JOLY' 'Vivette' 'ECO' 904 '1.27' '2.75' 'nan' '11.0' 'F' 'DARDABA' 'Soumaya' 'ECO' '620.0' '0.87' '1.88' 'nan' '12.0' 'F' 'BARBIER' 'Claire' 'ECO' '289.0' '0.41' '0.88' 'nan' '4.0' 'F' 'GERACI' 'Carole' 'DIV' '1705.0' '2.39' '5.18' 'nan' '5.0' 'M' 'LAMIRAULT' 'Luc' 'ENS' '9505.0' '13.32' '28.87' 'nan' '10.0' 'M' 'RIBAS' 'Romain' 'DVC' '329.0' '0.46' '1.0' 'nan' '3.0' 'M' 'MARTIAL' 'Rémi' 'LR' '2934.0' '4.11' '8.91' 'nan' '7.0' 'M' 'BOUTICOURT' 'Damien' 'DSV' '539.0' '0.76' '1.64' 'nan' '1.0' 'M' 'LAQUA' 'Éric' 'REC' '1134.0' '1.59' '3.44' 'nan' '6.0' 'F' 'FLAUNET' 'Régine' 'RN' '8086.0' '11.33' '24.56' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan']"
        candidate_fourth = "['69' 'Rhône' 6 '6ème circonscription' 'Complet' 89563 48901 '54.6' 40662 '45.4' 461 '0.51' '1.13' 136 '0.15' '0.33' 40065 '44.73' '98.53' 6 'M' 'PRIVOLT' 'Grégoire' 'DXG' 107 '0.12' '0.27' 'nan' 7 'F' 'BOUHAMI' 'Nadia' 'DXG' 347 '0.39' '0.87' 'nan' 1 'F' 'BUISSON' 'Katia' 'RDG' 2632 '2.94' '6.57' 'nan' 14 'M' 'AMARD' 'Gabriel' 'NUP' 16545 '18.47' '41.3' 'nan' '9.0' 'F' 'ROCHE' 'Ingrid' 'ECO' '490.0' '0.55' '1.22' 'nan' '12.0' 'M' 'MEZIANI' 'Zaïr' 'ECO' '720.0' '0.8' '1.8' 'nan' '3.0' 'M' 'RYCKAERT' 'Paul' 'DIV' '28.0' '0.03' '0.07' 'nan' '8.0' 'F' 'BOUTAYEB' 'Maude' 'DIV' '224.0' '0.25' '0.56' 'nan' '15.0' 'M' 'VIEIRA' 'Philippe' 'DIV' '684.0' '0.76' '1.71' 'nan' '4.0' 'F' 'WINKERMULLER' 'Laura' 'REG' '183.0' '0.2' '0.46' 'nan' '13.0' 'F' 'HAZIZA' 'Emmanuelle' 'ENS' '10777.0' '12.03' '26.9' 'nan' '2.0' 'M' 'SENDE' 'Jean-Eric' 'DVC' '526.0' '0.59' '1.31' 'nan' '5.0' 'M' 'CHARLIEU' 'Clément' 'UDI' '700.0' '0.78' '1.75' 'nan' '11.0' 'M' 'PORTA' 'Pierre' 'REC' '1774.0' '1.98' '4.43' 'nan' '10.0' 'F' 'MOREL' 'Michèle' 'RN' '4328.0' '4.83' '10.8' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan' 'nan']"
        candidates = [candidate_first, candidate_second, candidate_third, candidate_fourth]
        return candidates
        
    @patch.object(ExcelManager, 'import_first_round_results_datas', side_effect = get_four_candidate_data)
    def test_get_fourth_first_round_model_from_excel_manager(self, mock_excel_manager):
        pd = Mock()
        adapter = ElectionDistrictFirstRoundAdapter(pd, ExcelManager)
        
        elections_first_round_datas = adapter.extracts_datas_from_files()
        
        self.assertEqual(4, len(elections_first_round_datas))
        self.assertTrue(elections_first_round_datas[0].department != None)
        self.assertEqual(1, elections_first_round_datas[0].department.number)
        self.assertEqual('Ain', elections_first_round_datas[0].department.name)
        self.assertTrue(elections_first_round_datas[0].district != None)
        self.assertEqual(1, elections_first_round_datas[0].district.number)
        self.assertEqual('1ère circonscription', elections_first_round_datas[0].district.name)
        self.assertEqual('Complet', elections_first_round_datas[0].election.state_compute)
        self.assertEqual(86187, elections_first_round_datas[0].election.registered)
        self.assertEqual(43652, elections_first_round_datas[0].election.abstaining)
        self.assertEqual(50.65, elections_first_round_datas[0].election.rate_abstaining)
        self.assertEqual(42535, elections_first_round_datas[0].election.voting)
        self.assertEqual(49.35, elections_first_round_datas[0].election.rate_voting)  
        self.assertEqual(490, elections_first_round_datas[0].election.blank_balot)    
        self.assertEqual(0.57, elections_first_round_datas[0].election.rate_blank_registered)   
        self.assertEqual(1.15, elections_first_round_datas[0].election.rate_blank_voting)       
        self.assertEqual(234, elections_first_round_datas[0].election.null_ballot)  
        self.assertEqual(0.27, elections_first_round_datas[0].election.rate_null_registered)  
        self.assertEqual(0.55, elections_first_round_datas[0].election.rate_null_voting)  
        self.assertEqual(41811, elections_first_round_datas[0].election.expressed)  
        self.assertEqual(48.51, elections_first_round_datas[0].election.rate_express_registered)  
        self.assertEqual(98.3, elections_first_round_datas[0].election.rate_express_voting)  
        self.assertEqual(8, len(elections_first_round_datas[0].candidates))
        self.assertEqual('M', elections_first_round_datas[0].candidates[0].sexe)
        self.assertEqual('LAHY', elections_first_round_datas[0].candidates[0].last_name)
        self.assertEqual('Éric', elections_first_round_datas[0].candidates[0].first_name)
        self.assertEqual(391, elections_first_round_datas[0].candidates[0].vote)
        self.assertEqual(0.45, elections_first_round_datas[0].candidates[0].rate_vote_registered)
        self.assertEqual(0.94, elections_first_round_datas[0].candidates[0].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[1].sexe)
        self.assertEqual('GUÉRAUD', elections_first_round_datas[0].candidates[1].last_name)
        self.assertEqual('Sébastien', elections_first_round_datas[0].candidates[1].first_name)
        self.assertEqual(9982, elections_first_round_datas[0].candidates[1].vote)
        self.assertEqual(11.58, elections_first_round_datas[0].candidates[1].rate_vote_registered)
        self.assertEqual(23.87, elections_first_round_datas[0].candidates[1].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[0].candidates[2].sexe)
        self.assertEqual('ARMENJON', elections_first_round_datas[0].candidates[2].last_name)
        self.assertEqual('Eliane', elections_first_round_datas[0].candidates[2].first_name)
        self.assertEqual(1161, elections_first_round_datas[0].candidates[2].vote)
        self.assertEqual(1.35, elections_first_round_datas[0].candidates[2].rate_vote_registered)
        self.assertEqual(2.78, elections_first_round_datas[0].candidates[2].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[3].sexe)
        self.assertEqual('GUILLERMIN', elections_first_round_datas[0].candidates[3].last_name)
        self.assertEqual('Vincent', elections_first_round_datas[0].candidates[3].first_name)
        self.assertEqual(8071, elections_first_round_datas[0].candidates[3].vote)
        self.assertEqual(9.36, elections_first_round_datas[0].candidates[3].rate_vote_registered)
        self.assertEqual(19.3, elections_first_round_datas[0].candidates[3].rate_vote_expressed)        
        self.assertEqual('M', elections_first_round_datas[0].candidates[4].sexe)
        self.assertEqual('BRETON', elections_first_round_datas[0].candidates[4].last_name)
        self.assertEqual('Xavier', elections_first_round_datas[0].candidates[4].first_name)
        self.assertEqual(10599, elections_first_round_datas[0].candidates[4].vote)
        self.assertEqual(12.3, elections_first_round_datas[0].candidates[4].rate_vote_registered)
        self.assertEqual(25.35, elections_first_round_datas[0].candidates[4].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[5].sexe)
        self.assertEqual('MENDES', elections_first_round_datas[0].candidates[5].last_name)
        self.assertEqual('Michael', elections_first_round_datas[0].candidates[5].first_name)
        self.assertEqual(641, elections_first_round_datas[0].candidates[5].vote)
        self.assertEqual(0.74, elections_first_round_datas[0].candidates[5].rate_vote_registered)
        self.assertEqual(1.53, elections_first_round_datas[0].candidates[5].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[0].candidates[6].sexe)
        self.assertEqual('BELLON', elections_first_round_datas[0].candidates[6].last_name)
        self.assertEqual('Julien', elections_first_round_datas[0].candidates[6].first_name)
        self.assertEqual(1995, elections_first_round_datas[0].candidates[6].vote)
        self.assertEqual(2.31, elections_first_round_datas[0].candidates[6].rate_vote_registered)
        self.assertEqual(4.77, elections_first_round_datas[0].candidates[6].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[0].candidates[7].sexe)
        self.assertEqual('PIROUX GIANNOTTI', elections_first_round_datas[0].candidates[7].last_name)
        self.assertEqual('Brigitte', elections_first_round_datas[0].candidates[7].first_name)
        self.assertEqual(8971, elections_first_round_datas[0].candidates[7].vote)
        self.assertEqual(10.41, elections_first_round_datas[0].candidates[7].rate_vote_registered)
        self.assertEqual(21.46, elections_first_round_datas[0].candidates[7].rate_vote_expressed)
        
        self.assertEqual(25, elections_first_round_datas[1].department.number)
        self.assertEqual('Doubs', elections_first_round_datas[1].department.name)
        self.assertEqual(2, elections_first_round_datas[1].district.number)
        self.assertEqual('2ème circonscription', elections_first_round_datas[1].district.name)
        self.assertEqual('Complet', elections_first_round_datas[1].election.state_compute)
        self.assertEqual(79162, elections_first_round_datas[1].election.registered)
        self.assertEqual(37688, elections_first_round_datas[1].election.abstaining)
        self.assertEqual(47.61, elections_first_round_datas[1].election.rate_abstaining)
        self.assertEqual(41474, elections_first_round_datas[1].election.voting)
        self.assertEqual(52.39, elections_first_round_datas[1].election.rate_voting)  
        self.assertEqual(821, elections_first_round_datas[1].election.blank_balot)    
        self.assertEqual(1.04, elections_first_round_datas[1].election.rate_blank_registered)   
        self.assertEqual(1.98, elections_first_round_datas[1].election.rate_blank_voting)       
        self.assertEqual(326, elections_first_round_datas[1].election.null_ballot)  
        self.assertEqual(0.41, elections_first_round_datas[1].election.rate_null_registered)  
        self.assertEqual(0.79, elections_first_round_datas[1].election.rate_null_voting)  
        self.assertEqual(40327, elections_first_round_datas[1].election.expressed)  
        self.assertEqual(50.94, elections_first_round_datas[1].election.rate_express_registered)  
        self.assertEqual(97.23, elections_first_round_datas[1].election.rate_express_voting)  
        self.assertEqual(9, len(elections_first_round_datas[1].candidates))
        self.assertEqual('F', elections_first_round_datas[1].candidates[0].sexe)
        self.assertEqual('VUITTON', elections_first_round_datas[1].candidates[0].last_name)
        self.assertEqual('Brigitte', elections_first_round_datas[1].candidates[0].first_name)
        self.assertEqual(779, elections_first_round_datas[1].candidates[0].vote)
        self.assertEqual(0.98, elections_first_round_datas[1].candidates[0].rate_vote_registered)
        self.assertEqual(1.93, elections_first_round_datas[1].candidates[0].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[1].sexe)
        self.assertEqual('RAVACLEY', elections_first_round_datas[1].candidates[1].last_name)
        self.assertEqual('Stéphane', elections_first_round_datas[1].candidates[1].first_name)
        self.assertEqual(13112, elections_first_round_datas[1].candidates[1].vote)
        self.assertEqual(16.56, elections_first_round_datas[1].candidates[1].rate_vote_registered)
        self.assertEqual(32.51, elections_first_round_datas[1].candidates[1].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[2].sexe)
        self.assertEqual('THOMASSIN', elections_first_round_datas[1].candidates[2].last_name)
        self.assertEqual('Geoffrey', elections_first_round_datas[1].candidates[2].first_name)
        self.assertEqual(216, elections_first_round_datas[1].candidates[2].vote)
        self.assertEqual(0.27, elections_first_round_datas[1].candidates[2].rate_vote_registered)
        self.assertEqual(0.54, elections_first_round_datas[1].candidates[2].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[1].candidates[3].sexe)
        self.assertEqual('MEYER', elections_first_round_datas[1].candidates[3].last_name)
        self.assertEqual('Claudine', elections_first_round_datas[1].candidates[3].first_name)
        self.assertEqual(0, elections_first_round_datas[1].candidates[3].vote)
        self.assertEqual(0.0, elections_first_round_datas[1].candidates[3].rate_vote_registered)
        self.assertEqual(0.0, elections_first_round_datas[1].candidates[3].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[4].sexe)
        self.assertEqual('ALAUZET', elections_first_round_datas[1].candidates[4].last_name)
        self.assertEqual('Eric', elections_first_round_datas[1].candidates[4].first_name)
        self.assertEqual(12647, elections_first_round_datas[1].candidates[4].vote)
        self.assertEqual(15.98, elections_first_round_datas[1].candidates[4].rate_vote_registered)
        self.assertEqual(31.36, elections_first_round_datas[1].candidates[4].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[1].candidates[5].sexe)
        self.assertEqual('KAOULAL', elections_first_round_datas[1].candidates[5].last_name)
        self.assertEqual('Chafia', elections_first_round_datas[1].candidates[5].first_name)
        self.assertEqual(4354, elections_first_round_datas[1].candidates[5].vote)
        self.assertEqual(5.5, elections_first_round_datas[1].candidates[5].rate_vote_registered)
        self.assertEqual(10.8, elections_first_round_datas[1].candidates[5].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[6].sexe)
        self.assertEqual('PRENEL', elections_first_round_datas[1].candidates[6].last_name)
        self.assertEqual('Jim', elections_first_round_datas[1].candidates[6].first_name)
        self.assertEqual(692, elections_first_round_datas[1].candidates[6].vote)
        self.assertEqual(0.87, elections_first_round_datas[1].candidates[6].rate_vote_registered)
        self.assertEqual(1.72, elections_first_round_datas[1].candidates[6].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[1].candidates[7].sexe)
        self.assertEqual('CARRAU', elections_first_round_datas[1].candidates[7].last_name)
        self.assertEqual('Barbara', elections_first_round_datas[1].candidates[7].first_name)
        self.assertEqual(1472, elections_first_round_datas[1].candidates[7].vote)
        self.assertEqual(1.86, elections_first_round_datas[1].candidates[7].rate_vote_registered)
        self.assertEqual(3.65, elections_first_round_datas[1].candidates[7].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[1].candidates[8].sexe)
        self.assertEqual('FUSIS', elections_first_round_datas[1].candidates[8].last_name)
        self.assertEqual('Eric', elections_first_round_datas[1].candidates[8].first_name)
        self.assertEqual(7055, elections_first_round_datas[1].candidates[8].vote)
        self.assertEqual(8.91, elections_first_round_datas[1].candidates[8].rate_vote_registered)
        self.assertEqual(17.49, elections_first_round_datas[1].candidates[8].rate_vote_expressed)
        
        self.assertEqual(28, elections_first_round_datas[2].department.number)
        self.assertEqual('Eure-et-Loir', elections_first_round_datas[2].department.name)
        self.assertEqual(3, elections_first_round_datas[2].district.number)
        self.assertEqual('3ème circonscription', elections_first_round_datas[2].district.name)
        self.assertEqual('Complet', elections_first_round_datas[2].election.state_compute)
        self.assertEqual(71342, elections_first_round_datas[2].election.registered)
        self.assertEqual(37670, elections_first_round_datas[2].election.abstaining)
        self.assertEqual(52.8, elections_first_round_datas[2].election.rate_abstaining)
        self.assertEqual(33672, elections_first_round_datas[2].election.voting)
        self.assertEqual(47.2, elections_first_round_datas[2].election.rate_voting)  
        self.assertEqual(523, elections_first_round_datas[2].election.blank_balot)    
        self.assertEqual(0.73, elections_first_round_datas[2].election.rate_blank_registered)   
        self.assertEqual(1.55, elections_first_round_datas[2].election.rate_blank_voting)       
        self.assertEqual(222, elections_first_round_datas[2].election.null_ballot)  
        self.assertEqual(0.31, elections_first_round_datas[2].election.rate_null_registered)  
        self.assertEqual(0.66, elections_first_round_datas[2].election.rate_null_voting)  
        self.assertEqual(32927, elections_first_round_datas[2].election.expressed)  
        self.assertEqual(46.15, elections_first_round_datas[2].election.rate_express_registered)  
        self.assertEqual(97.79, elections_first_round_datas[2].election.rate_express_voting)  
        self.assertEqual(13, len(elections_first_round_datas[2].candidates))
        self.assertEqual('M', elections_first_round_datas[2].candidates[0].sexe)
        self.assertEqual('CHEVROLLIER', elections_first_round_datas[2].candidates[0].last_name)
        self.assertEqual('Vincent', elections_first_round_datas[2].candidates[0].first_name)
        self.assertEqual(325, elections_first_round_datas[2].candidates[0].vote)
        self.assertEqual(0.46, elections_first_round_datas[2].candidates[0].rate_vote_registered)
        self.assertEqual(0.99, elections_first_round_datas[2].candidates[0].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[2].candidates[1].sexe)
        self.assertEqual('LAMOUREUX', elections_first_round_datas[2].candidates[1].last_name)
        self.assertEqual('Aurore', elections_first_round_datas[2].candidates[1].first_name)
        self.assertEqual(274, elections_first_round_datas[2].candidates[1].vote)
        self.assertEqual(0.38, elections_first_round_datas[2].candidates[1].rate_vote_registered)
        self.assertEqual(0.83, elections_first_round_datas[2].candidates[1].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[2].candidates[2].sexe)
        self.assertEqual('ORFILA', elections_first_round_datas[2].candidates[2].last_name)
        self.assertEqual('Valéria', elections_first_round_datas[2].candidates[2].first_name)
        self.assertEqual(6283, elections_first_round_datas[2].candidates[2].vote)
        self.assertEqual(8.81, elections_first_round_datas[2].candidates[2].rate_vote_registered)
        self.assertEqual(19.08, elections_first_round_datas[2].candidates[2].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[2].candidates[3].sexe)
        self.assertEqual('JOLY', elections_first_round_datas[2].candidates[3].last_name)
        self.assertEqual('Vivette', elections_first_round_datas[2].candidates[3].first_name)
        self.assertEqual(904, elections_first_round_datas[2].candidates[3].vote)
        self.assertEqual(1.27, elections_first_round_datas[2].candidates[3].rate_vote_registered)
        self.assertEqual(2.75, elections_first_round_datas[2].candidates[3].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[2].candidates[4].sexe)
        self.assertEqual('DARDABA', elections_first_round_datas[2].candidates[4].last_name)
        self.assertEqual('Soumaya', elections_first_round_datas[2].candidates[4].first_name)
        self.assertEqual(620, elections_first_round_datas[2].candidates[4].vote)
        self.assertEqual(0.87, elections_first_round_datas[2].candidates[4].rate_vote_registered)
        self.assertEqual(1.88, elections_first_round_datas[2].candidates[4].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[2].candidates[5].sexe)
        self.assertEqual('BARBIER', elections_first_round_datas[2].candidates[5].last_name)
        self.assertEqual('Claire', elections_first_round_datas[2].candidates[5].first_name)
        self.assertEqual(289, elections_first_round_datas[2].candidates[5].vote)
        self.assertEqual(0.41, elections_first_round_datas[2].candidates[5].rate_vote_registered)
        self.assertEqual(0.88, elections_first_round_datas[2].candidates[5].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[2].candidates[6].sexe)
        self.assertEqual('GERACI', elections_first_round_datas[2].candidates[6].last_name)
        self.assertEqual('Carole', elections_first_round_datas[2].candidates[6].first_name)
        self.assertEqual(1705, elections_first_round_datas[2].candidates[6].vote)
        self.assertEqual(2.39, elections_first_round_datas[2].candidates[6].rate_vote_registered)
        self.assertEqual(5.18, elections_first_round_datas[2].candidates[6].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[2].candidates[7].sexe)
        self.assertEqual('LAMIRAULT', elections_first_round_datas[2].candidates[7].last_name)
        self.assertEqual('Luc', elections_first_round_datas[2].candidates[7].first_name)
        self.assertEqual(9505, elections_first_round_datas[2].candidates[7].vote)
        self.assertEqual(13.32, elections_first_round_datas[2].candidates[7].rate_vote_registered)
        self.assertEqual(28.87, elections_first_round_datas[2].candidates[7].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[2].candidates[8].sexe)
        self.assertEqual('RIBAS', elections_first_round_datas[2].candidates[8].last_name)
        self.assertEqual('Romain', elections_first_round_datas[2].candidates[8].first_name)
        self.assertEqual(329, elections_first_round_datas[2].candidates[8].vote)
        self.assertEqual(0.46, elections_first_round_datas[2].candidates[8].rate_vote_registered)
        self.assertEqual(1, elections_first_round_datas[2].candidates[8].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[2].candidates[9].sexe)
        self.assertEqual('MARTIAL', elections_first_round_datas[2].candidates[9].last_name)
        self.assertEqual('Rémi', elections_first_round_datas[2].candidates[9].first_name)
        self.assertEqual(2934, elections_first_round_datas[2].candidates[9].vote)
        self.assertEqual(4.11, elections_first_round_datas[2].candidates[9].rate_vote_registered)
        self.assertEqual(8.91, elections_first_round_datas[2].candidates[9].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[2].candidates[10].sexe)
        self.assertEqual('BOUTICOURT', elections_first_round_datas[2].candidates[10].last_name)
        self.assertEqual('Damien', elections_first_round_datas[2].candidates[10].first_name)
        self.assertEqual(539, elections_first_round_datas[2].candidates[10].vote)
        self.assertEqual(0.76, elections_first_round_datas[2].candidates[10].rate_vote_registered)
        self.assertEqual(1.64, elections_first_round_datas[2].candidates[10].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[2].candidates[11].sexe)
        self.assertEqual('LAQUA', elections_first_round_datas[2].candidates[11].last_name)
        self.assertEqual('Éric', elections_first_round_datas[2].candidates[11].first_name)
        self.assertEqual(1134, elections_first_round_datas[2].candidates[11].vote)
        self.assertEqual(1.59, elections_first_round_datas[2].candidates[11].rate_vote_registered)
        self.assertEqual(3.44, elections_first_round_datas[2].candidates[11].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[2].candidates[12].sexe)
        self.assertEqual('FLAUNET', elections_first_round_datas[2].candidates[12].last_name)
        self.assertEqual('Régine', elections_first_round_datas[2].candidates[12].first_name)
        self.assertEqual(8086, elections_first_round_datas[2].candidates[12].vote)
        self.assertEqual(11.33, elections_first_round_datas[2].candidates[12].rate_vote_registered)
        self.assertEqual(24.56, elections_first_round_datas[2].candidates[12].rate_vote_expressed)
        
        self.assertEqual(69, elections_first_round_datas[3].department.number)
        self.assertEqual('Rhône', elections_first_round_datas[3].department.name)
        self.assertEqual(6, elections_first_round_datas[3].district.number)
        self.assertEqual('6ème circonscription', elections_first_round_datas[3].district.name)
        self.assertEqual('Complet', elections_first_round_datas[3].election.state_compute)
        self.assertEqual(89563, elections_first_round_datas[3].election.registered)
        self.assertEqual(48901, elections_first_round_datas[3].election.abstaining)
        self.assertEqual(54.6, elections_first_round_datas[3].election.rate_abstaining)
        self.assertEqual(40662, elections_first_round_datas[3].election.voting)
        self.assertEqual(45.4, elections_first_round_datas[3].election.rate_voting)  
        self.assertEqual(461, elections_first_round_datas[3].election.blank_balot)    
        self.assertEqual(0.51, elections_first_round_datas[3].election.rate_blank_registered)   
        self.assertEqual(1.13, elections_first_round_datas[3].election.rate_blank_voting)       
        self.assertEqual(136, elections_first_round_datas[3].election.null_ballot)  
        self.assertEqual(0.15, elections_first_round_datas[3].election.rate_null_registered)  
        self.assertEqual(0.33, elections_first_round_datas[3].election.rate_null_voting)  
        self.assertEqual(40065, elections_first_round_datas[3].election.expressed)  
        self.assertEqual(44.73, elections_first_round_datas[3].election.rate_express_registered)  
        self.assertEqual(98.53, elections_first_round_datas[3].election.rate_express_voting)  
        self.assertEqual(15, len(elections_first_round_datas[3].candidates))
        self.assertEqual('M', elections_first_round_datas[3].candidates[0].sexe)
        self.assertEqual('PRIVOLT', elections_first_round_datas[3].candidates[0].last_name)
        self.assertEqual('Grégoire', elections_first_round_datas[3].candidates[0].first_name)
        self.assertEqual(107, elections_first_round_datas[3].candidates[0].vote)
        self.assertEqual(0.12, elections_first_round_datas[3].candidates[0].rate_vote_registered)
        self.assertEqual(0.27, elections_first_round_datas[3].candidates[0].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[3].candidates[1].sexe)
        self.assertEqual('BOUHAMI', elections_first_round_datas[3].candidates[1].last_name)
        self.assertEqual('Nadia', elections_first_round_datas[3].candidates[1].first_name)
        self.assertEqual(347, elections_first_round_datas[3].candidates[1].vote)
        self.assertEqual(0.39, elections_first_round_datas[3].candidates[1].rate_vote_registered)
        self.assertEqual(0.87, elections_first_round_datas[3].candidates[1].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[3].candidates[2].sexe)
        self.assertEqual('BUISSON', elections_first_round_datas[3].candidates[2].last_name)
        self.assertEqual('Katia', elections_first_round_datas[3].candidates[2].first_name)
        self.assertEqual(2632, elections_first_round_datas[3].candidates[2].vote)
        self.assertEqual(2.94, elections_first_round_datas[3].candidates[2].rate_vote_registered)
        self.assertEqual(6.57, elections_first_round_datas[3].candidates[2].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[3].candidates[3].sexe)
        self.assertEqual('AMARD', elections_first_round_datas[3].candidates[3].last_name)
        self.assertEqual('Gabriel', elections_first_round_datas[3].candidates[3].first_name)
        self.assertEqual(16545, elections_first_round_datas[3].candidates[3].vote)
        self.assertEqual(18.47, elections_first_round_datas[3].candidates[3].rate_vote_registered)
        self.assertEqual(41.3, elections_first_round_datas[3].candidates[3].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[3].candidates[4].sexe)
        self.assertEqual('ROCHE', elections_first_round_datas[3].candidates[4].last_name)
        self.assertEqual('Ingrid', elections_first_round_datas[3].candidates[4].first_name)
        self.assertEqual(490, elections_first_round_datas[3].candidates[4].vote)
        self.assertEqual(0.55, elections_first_round_datas[3].candidates[4].rate_vote_registered)
        self.assertEqual(1.22, elections_first_round_datas[3].candidates[4].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[3].candidates[5].sexe)
        self.assertEqual('MEZIANI', elections_first_round_datas[3].candidates[5].last_name)
        self.assertEqual('Zaïr', elections_first_round_datas[3].candidates[5].first_name)
        self.assertEqual(720, elections_first_round_datas[3].candidates[5].vote)
        self.assertEqual(0.8, elections_first_round_datas[3].candidates[5].rate_vote_registered)
        self.assertEqual(1.8, elections_first_round_datas[3].candidates[5].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[3].candidates[6].sexe)
        self.assertEqual('RYCKAERT', elections_first_round_datas[3].candidates[6].last_name)
        self.assertEqual('Paul', elections_first_round_datas[3].candidates[6].first_name)
        self.assertEqual(28, elections_first_round_datas[3].candidates[6].vote)
        self.assertEqual(0.03, elections_first_round_datas[3].candidates[6].rate_vote_registered)
        self.assertEqual(0.07, elections_first_round_datas[3].candidates[6].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[3].candidates[7].sexe)
        self.assertEqual('BOUTAYEB', elections_first_round_datas[3].candidates[7].last_name)
        self.assertEqual('Maude', elections_first_round_datas[3].candidates[7].first_name)
        self.assertEqual(224, elections_first_round_datas[3].candidates[7].vote)
        self.assertEqual(0.25, elections_first_round_datas[3].candidates[7].rate_vote_registered)
        self.assertEqual(0.56, elections_first_round_datas[3].candidates[7].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[3].candidates[8].sexe)
        self.assertEqual('VIEIRA', elections_first_round_datas[3].candidates[8].last_name)
        self.assertEqual('Philippe', elections_first_round_datas[3].candidates[8].first_name)
        self.assertEqual(684, elections_first_round_datas[3].candidates[8].vote)
        self.assertEqual(0.76, elections_first_round_datas[3].candidates[8].rate_vote_registered)
        self.assertEqual(1.71, elections_first_round_datas[3].candidates[8].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[3].candidates[9].sexe)
        self.assertEqual('WINKERMULLER', elections_first_round_datas[3].candidates[9].last_name)
        self.assertEqual('Laura', elections_first_round_datas[3].candidates[9].first_name)
        self.assertEqual(183, elections_first_round_datas[3].candidates[9].vote)
        self.assertEqual(0.2, elections_first_round_datas[3].candidates[9].rate_vote_registered)
        self.assertEqual(0.46, elections_first_round_datas[3].candidates[9].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[3].candidates[10].sexe)
        self.assertEqual('HAZIZA', elections_first_round_datas[3].candidates[10].last_name)
        self.assertEqual('Emmanuelle', elections_first_round_datas[3].candidates[10].first_name)
        self.assertEqual(10777, elections_first_round_datas[3].candidates[10].vote)
        self.assertEqual(12.03, elections_first_round_datas[3].candidates[10].rate_vote_registered)
        self.assertEqual(26.9, elections_first_round_datas[3].candidates[10].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[3].candidates[11].sexe)
        self.assertEqual('SENDE', elections_first_round_datas[3].candidates[11].last_name)
        self.assertEqual('Jean-Eric', elections_first_round_datas[3].candidates[11].first_name)
        self.assertEqual(526, elections_first_round_datas[3].candidates[11].vote)
        self.assertEqual(0.59, elections_first_round_datas[3].candidates[11].rate_vote_registered)
        self.assertEqual(1.31, elections_first_round_datas[3].candidates[11].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[3].candidates[12].sexe)
        self.assertEqual('CHARLIEU', elections_first_round_datas[3].candidates[12].last_name)
        self.assertEqual('Clément', elections_first_round_datas[3].candidates[12].first_name)
        self.assertEqual(700, elections_first_round_datas[3].candidates[12].vote)
        self.assertEqual(0.78, elections_first_round_datas[3].candidates[12].rate_vote_registered)
        self.assertEqual(1.75, elections_first_round_datas[3].candidates[12].rate_vote_expressed)
        self.assertEqual('M', elections_first_round_datas[3].candidates[13].sexe)
        self.assertEqual('PORTA', elections_first_round_datas[3].candidates[13].last_name)
        self.assertEqual('Pierre', elections_first_round_datas[3].candidates[13].first_name)
        self.assertEqual(1774, elections_first_round_datas[3].candidates[13].vote)
        self.assertEqual(1.98, elections_first_round_datas[3].candidates[13].rate_vote_registered)
        self.assertEqual(4.43, elections_first_round_datas[3].candidates[13].rate_vote_expressed)
        self.assertEqual('F', elections_first_round_datas[3].candidates[14].sexe)
        self.assertEqual('MOREL', elections_first_round_datas[3].candidates[14].last_name)
        self.assertEqual('Michèle', elections_first_round_datas[3].candidates[14].first_name)
        self.assertEqual(4328, elections_first_round_datas[3].candidates[14].vote)
        self.assertEqual(4.83, elections_first_round_datas[3].candidates[14].rate_vote_registered)
        self.assertEqual(10.8, elections_first_round_datas[3].candidates[14].rate_vote_expressed)